Simple Pyfrag Calculation
=========================

The user may choose to only install the part of the program needed to perform the Activation Strain Analysis (ASA) based on Activation Strain Model (ASM). The ASA can be performed using a variety of quantum chemical software packages, including: ADF, Gaussian, Orca, and Turbomole. The user must only provide a series of coordinate from the reaction path.

ADF
---

The basic PyFrag2019 input for the Activation Strain Analysis (ASA) using ADF is similar to the previous input example, except the coordinate section: ::

   JOBSUB

   #!/bin/bash
   #SBATCH -J NNC
   #SBATCH -N 1
   #SBATCH -t 24:00:00
   #SBATCH --ntasks-per-node=24
   #SBATCH --partition=normal
   #SBATCH --output=%job.stdout
   #SBATCH --error=%job.stdout
   export NSCM=24

   JOBSUB END

   PyFrag

   ircpath /home/x2sun/pyfragnew/test/molecule.xyz
   fragment  2
   fragment  1 3 4 5 6
   strain    0
   strain   -554.09
   bondlength 1 6  1.09

   PyFrag END

   ADF

   basis
   type TZ2P
   core Small
   end

   xc
   gga OPBE
   end

   relativistic SCALAR ZORA

   scf
   iterations 299
   converge 0.00001
   mixing 0.20
   end

   numericalquality verygood

   charge 0
   symmetry auto

   ADF END

The only difference compared with previous job input that you need to provide the path to a series of coordinate. For more specification, just read the previous page. You can specify the filename of the LT or IRC or simple text output file you wish to analyze, both TAPE21 and normal output files can be provided. Note: The TAPE21 file should have a .t21 extension! The user can specify two output files for an IRC TAPE21 (backward and forward). A text file containing coordinates of an IRC calculation is also acceptable, for example, a text file generated by ADFmovie or Gaussian. ::

   ircpath path/filename.xyz
   irct21 path/filename.t21
   lt path/filename.t21

To submit a job, create a directory and generate a input file and run the following command to submit a job:

``pyfrag job.in``

For a quick test, if your installation_ is correct, run the following command to do an easy test:

``cp -r $HOSTPYFRAG/adf_new/example ~/pyfrag_adf_test``

Enter the directory and modify the submit information according to your cluster requirement and the path to the out file,

``cd ~/pyfrag_adf_test``

And run the job

``pyfrag job.in``


Gaussian
--------

The basic pyfrag input for activation strain analysis for Gaussian is as follow: ::

   INPUT_SPECS
   type = IRC
   output file = /home/x2sun/pyfragnew/test/Ethylene-forward.amv

   frag1 = C4H6
   1.C
   2.H
   3.C
   4.H
   5.C
   6.H
   7.C
   8.H
   13.H
   14.H
   end frag1
   frag2 = C2H4
   9.C
   10.C
   11.H
   12.H
   15.H
   16.H
   end frag2

   print bond 1 9 1.384
   print strain frag1  1000
   print strain frag2  2000

   END INPUT_SPECS


   "g09" <<eor

   %nprocs=16
   %mem=14000mb
   #OPBE/6-31G*

   Comments

   0 1
   END INPUT

The first section between INPUT_SPECS and END INPUT_SPECS is used to define fragment and provide coordinate path.
The second section between END INPUT_SPECS and END INPUT is used to do Gaussian parameter set up.
To submit a job, create a directory and generate a input file and run the following command to submit a job:

``pyfrag -x gaussian job.in``

For a quick test, if your installation_ is correct, run the following command to do an easy test:

``cp -r $HOSTPYFRAG/gaussian/example ~/pyfrag_gaussian_test``

Enter to the directory and modify the submit information in the sub file according to your cluster requirement,

``cd ~/pyfrag_gaussian_test``

And run the job

``pyfrag -x gaussian input.com`


Orca
----
The basic pyfrag input for activation strain analysis for Orca is as follow: ::

   INPUT_SPECS
   type = IRC
   output file = irc.amv
   frag1 = H2
   1.H
   2.H
   end frag1
   frag2 = H2
   3.H
   4.H
   end frag2

   print bond 1 3 1.00
   print strain frag1  100
   print strain frag2  200

   END INPUT_SPECS

   ! SP B3LYP 6-31G(d)

   * xyz 0 1
   END INPUT

The first section between INPUT_SPECS and END INPUT_SPECS is used to define fragment and provide coordinate path.
The second section between END INPUT_SPECS and END INPUT is used to do Orca parameter set up.
To submit a job, create a directory and generate a input file and run the following command to submit a job:

``pyfrag -x orca job.in``

For a quick test, if your installation_ is correct, run the following command to do an easy test:

``cp -r $HOSTPYFRAG/orca/example ~/pyfrag_gaussian_test``

Enter to the directory and modify the submit information in the sub file according to your cluster requirement,

``cd ~/pyfrag_gaussian_test``

And run the job

``pyfrag -x gaussian input.com`


Turbomole
---------
The basic pyfrag input for activation strain analysis for Turbomole is as follow: ::

   INPUT_SPECS
   type = IRC
   output file = irc.amv
   frag1 = pd
   1.H
   2.H
   end frag1
   frag2 = cc
   3.H
   4.H
   end frag2

   print bond 1 3 1.00
   print strain frag1  100
   print strain frag2  200

   END INPUT_SPECS
   %method
   ENRGY :: b-p/SVP [gen_stat=1,scf_msil=99,&
                     scf_grid=m4]
   %charge
   0
   %coord
   %end
   END INPUT

The first section between INPUT_SPECS and END INPUT_SPECS is used to define fragment and provide coordinate path.
The second section between END INPUT_SPECS and END INPUT is used to do Turbomole parameter set up.
To submit a job, create a directory and generate a input file and run the following command to submit a job:

``pyfrag -x turbomole job.in``



.. _installation: https://pyfragdocument.readthedocs.io/en/latest/install.html
